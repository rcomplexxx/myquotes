{"version":3,"file":"static/js/163.d6eba78a.chunk.js","mappings":"gNAOe,SAASA,KAEJC,EAAAA,EAAAA,MAAhB,IAEA,GAA8CC,EAAAA,EAAAA,UAAS,IAAG,eAAnDC,EAAgB,KAAEC,EAAmB,KAC5C,GAA6CF,EAAAA,EAAAA,UAAS,IAAG,eAAlDG,EAAe,KAAEC,EAAkB,KAEpCC,GAAQC,EAAAA,EAAAA,UACRC,GAAMD,EAAAA,EAAAA,UAGNE,GAAiBC,EAAAA,EAAAA,YAAWC,EAAAA,GAE5BC,EAAoB,WAEG,IAAtBN,EAAOO,QAAQC,MAAWX,GAAoB,SAAAY,GAAS,MAAG,iBAAiB,IACvD,IAAlBb,GAAwBC,GAAoB,SAAAY,GAAS,MAAG,EAAE,GAEnE,EAYMC,EAAmB,WACG,IAArBR,EAAMK,QAAQC,MAAUT,GAAmB,SAAAU,GAAS,MAAG,iBAAiB,IACrD,IAAjBX,GAAuBC,GAAmB,SAAAU,GAAS,MAAG,EAAE,GACjE,EAuBA,OAAO,gBAAKE,UAAU,gBAAe,UAAC,kBAAMA,UAAU,YAAaC,SApB/C,SAACC,GAKjB,GAJAA,EAAMC,iBACNR,IACAI,IAE0B,KAAtBV,EAAOO,QAAQC,OAAmC,KAArBN,EAAMK,QAAQC,MAAU,CACrD,IAAMO,EAAaf,EAAOO,QAAQC,MAAMQ,OAAO,GAAGC,cAAcjB,EAAOO,QAAQC,MAAMU,MAAM,GAErFC,EAAajB,EAAMK,QAAQC,MAAMQ,OAAO,GAAGC,cAAgBf,EAAMK,QAAQC,MAAMU,MAAM,GAG3Ff,EAAiBiB,QAAQ,CAACC,KAAKF,EAAanB,OAAQe,EAAYO,SAAS,KAE7EpB,EAAMK,QAAQC,MAAM,GACpBR,EAAOO,QAAQC,MAAM,EAEzB,CAEA,EAE2F,WACvF,iBAAKG,UAAU,qBAAoB,WACnC,kBAAOY,QAAQ,SAASZ,UAAU,aAAY,SAAC,YAC/C,kBAAOa,GAAG,SAASC,KAAK,OAAOd,UAAWf,EAAiB,oBAAoB,aAAc8B,IAAK1B,EAClG2B,OAAQrB,EAAqBsB,SAxCD,WAEP,IAAlBhC,GAA8C,IAAtBI,EAAOO,QAAQC,OAAWX,GAAoB,SAAAY,GAAS,MAAG,EAAE,GAAE,IAuCxFb,IAAoB,uBAAIA,KACzB,kBAAO2B,QAAQ,QAAQZ,UAAU,aAAY,SAAC,WAC9C,qBAAUa,GAAG,QAAQC,KAAK,OAAOd,UAAWb,EAAgB,oBAAoB,aAAc+B,KAAK,IAAIH,IAAKxB,EAC5GyB,OAAQjB,EAAoBkB,SAtCD,WACP,IAAjB9B,GAA4C,IAArBI,EAAMK,QAAQC,OAAUT,GAAmB,SAAAU,GAAS,MAAI,EAAE,GACxF,IAqCKX,IAAmB,uBAAIA,IACvBK,EAAiB2B,UAAW,uBAAG,wBAEhC,gBAAKnB,UAAU,sBAAqB,UAAC,mBAAQc,KAAK,SAASd,UAAU,cAAa,SAAC,oBAE3F,C","sources":["Pages/AddQuotePage.jsx"],"sourcesContent":["import { useRef } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./Styles/AddQuotePage.css\"\r\nimport { useContext } from \"react\";\r\nimport { httpContext } from \"../Components/httpHookContext\";\r\n\r\nexport default function AddQuotePage(){\r\n\r\n    const navigate= useNavigate();\r\n\r\n    const [authorInputError, setAuthorInputError]=useState('');\r\n    const [quoteInputError, setQuoteInputError]= useState('');\r\n\r\n    const author= useRef();\r\n    const quote=useRef();\r\n    \r\n\r\n    const myHttpController=useContext(httpContext);\r\n\r\n    const validateAuthorInput=()=>{\r\n      \r\n        if(author.current.value=='') setAuthorInputError(prevState =>'Field is empty!');\r\n        else authorInputError!='' && setAuthorInputError(prevState =>'');\r\n        \r\n    }\r\n\r\n    const validateAuthorInputChange=()=>{\r\n      \r\n        if(authorInputError!='' && author.current.value!='') setAuthorInputError(prevState =>'');}\r\n    \r\n    \r\n\r\n    const validateQuoteInputChange=()=>{\r\n        if(quoteInputError!='' && quote.current.value!='')setQuoteInputError(prevState => '')\r\n    }\r\n\r\n    const validateQuoteInput=()=>{\r\n        if(quote.current.value=='')setQuoteInputError(prevState =>'Field is empty!');\r\n        else quoteInputError!='' && setQuoteInputError(prevState =>'')\r\n    }\r\n\r\n\r\n    const submitHandler=(event)=>{\r\n        event.preventDefault();\r\n        validateAuthorInput();\r\n        validateQuoteInput();\r\n        \r\n        if(!author.current.value=='' && !quote.current.value==''){\r\n            const authorFinal= author.current.value.charAt(0).toUpperCase()+author.current.value.slice(1);\r\n           // author.current.value.charAt(0)=author.current.value.charAt(0).toUpperCase();\r\n            const quoteFinal = quote.current.value.charAt(0).toUpperCase() + quote.current.value.slice(1);\r\n\r\n           \r\n            myHttpController.setData({text:quoteFinal , author: authorFinal,comments:[]});\r\n        \r\n        quote.current.value='';\r\n        author.current.value='';\r\n       \r\n    }\r\n        \r\n    }\r\n\r\n    return <div className=\"centerFormDiv\"><form className=\"quoteForm\"  onSubmit={submitHandler}>\r\n        <div className=\"formDivInputHelper\">\r\n        <label htmlFor='author' className=\"labelStyle\">Author</label>\r\n        <input id='author' type=\"text\" className={authorInputError?'inputStyleWarning':\"inputStyle\"} ref={author}\r\n        onBlur={validateAuthorInput} onChange={validateAuthorInputChange}></input>\r\n        {authorInputError && <p>{authorInputError}</p>}\r\n        <label htmlFor='quote' className=\"labelStyle\">Quote</label>\r\n        <textarea id='quote' type=\"text\" className={quoteInputError?'inputStyleWarning':\"inputStyle\"} rows=\"4\" ref={quote}\r\n        onBlur={validateQuoteInput} onChange={validateQuoteInputChange}></textarea>\r\n        {quoteInputError && <p>{quoteInputError}</p>}\r\n        {myHttpController.pending && <p>Adding quote...</p>}\r\n        </div>\r\n        <div className=\"formDivButtonHelper\"><button type=\"submit\" className=\"buttonStyle\">Add Quote</button></div>\r\n    </form></div>\r\n}"],"names":["AddQuotePage","useNavigate","useState","authorInputError","setAuthorInputError","quoteInputError","setQuoteInputError","author","useRef","quote","myHttpController","useContext","httpContext","validateAuthorInput","current","value","prevState","validateQuoteInput","className","onSubmit","event","preventDefault","authorFinal","charAt","toUpperCase","slice","quoteFinal","setData","text","comments","htmlFor","id","type","ref","onBlur","onChange","rows","pending"],"sourceRoot":""}